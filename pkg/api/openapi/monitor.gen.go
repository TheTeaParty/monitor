// Package monitorAPI provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package monitorAPI

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// Report defines model for Report.
type Report struct {
	CreatedAt    int    `json:"createdAt"`
	Details      string `json:"details"`
	Id           string `json:"id"`
	ResponseTime int    `json:"responseTime"`
	ServiceURL   string `json:"serviceURL"`
	Status       string `json:"status"`
}

// GetReportsParams defines parameters for GetReports.
type GetReportsParams struct {
	ReportedAtFrom       *int64    `json:"reportedAtFrom,omitempty"`
	ReportedAtTo         *int64    `json:"reportedAtTo,omitempty"`
	ServiceURLs          *[]string `json:"serviceURLs,omitempty"`
	Status               *string   `json:"status,omitempty"`
	ResponseTimeMoreThen *int64    `json:"responseTimeMoreThen,omitempty"`
	ResponseTimeLessThen *int64    `json:"responseTimeLessThen,omitempty"`
}

type ServerInterface interface {
	// Get reports. (GET /reports)
	GetReports(w http.ResponseWriter, r *http.Request)
}

// ParamsForGetReports operation parameters from context
func ParamsForGetReports(ctx context.Context) *GetReportsParams {
	return ctx.Value("GetReportsParams").(*GetReportsParams)
}

// GetReports operation middleware
func GetReportsCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// Parameter object where we will unmarshal all parameters from the context
		var params GetReportsParams

		// ------------- Optional query parameter "reportedAtFrom" -------------
		if paramValue := r.URL.Query().Get("reportedAtFrom"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "reportedAtFrom", r.URL.Query(), &params.ReportedAtFrom)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter reportedAtFrom: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "reportedAtTo" -------------
		if paramValue := r.URL.Query().Get("reportedAtTo"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "reportedAtTo", r.URL.Query(), &params.ReportedAtTo)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter reportedAtTo: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "serviceURLs" -------------
		if paramValue := r.URL.Query().Get("serviceURLs"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", false, false, "serviceURLs", r.URL.Query(), &params.ServiceURLs)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter serviceURLs: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "status" -------------
		if paramValue := r.URL.Query().Get("status"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter status: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "responseTimeMoreThen" -------------
		if paramValue := r.URL.Query().Get("responseTimeMoreThen"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "responseTimeMoreThen", r.URL.Query(), &params.ResponseTimeMoreThen)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter responseTimeMoreThen: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "responseTimeLessThen" -------------
		if paramValue := r.URL.Query().Get("responseTimeLessThen"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "responseTimeLessThen", r.URL.Query(), &params.ResponseTimeLessThen)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter responseTimeLessThen: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetReportsParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetReportsCtx)
		r.Get("/reports", si.GetReports)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUzW7bTAx8FYPfd1xITlv0sDdfWhhN0MBwT4EPW4m2N9D+hEsFFQy9e8GVYjm1gqJF",
	"bwJXnCE5Q56gCi4Gj54T6BOk6ojO5M8NxkAsX5FCRGKLOV4RGsZ6lZ+4iwgarGc8IEGvoEY2tkkXj4nJ",
	"+oO82Xo2TJhi8Am31uE8aEJ6thV+29zOAiQ23M5RZvCn1hLWoB+EX13U/wr3lzLOoFNHO/UCH74/YsXQ",
	"C771+yDMNaaKbGQbPGhY3a8X+0ALF7zlIMUUoIAtN5J/d44uVvdrUPCMlIbEm2JZLKWnENGbaEHD+2JZ",
	"3ICCaPiYmywpS5O/D5h1EIGMcK9r0PAZeTP+ImlkHDJSAv1wAissTy1SBwq8kYnDgCcz+UTBSe/ZBgK8",
	"D+QMD2p8/ADqSpxe/Q5zG/4cEX/EJtQIem+ahGqWYRIvvSKwjG7ef2PAEJlu8E2X9ZCS4K1Gzj6YGK5c",
	"9tYIJkPdBcLtEf2/Gu6EfIsp/QXybjJ8Hta75TJvd/CMPnvKxNjYKruqfEziztPclP8n3IOG/8rpkpTj",
	"GSnHG3I1+j4fisuF+folb2tqnTPUDR5ejD4vhgTR+8XFLTWg4cgcky5LE21xsWlNqEwD/a7/GQAA//93",
	"/OF33gQAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

